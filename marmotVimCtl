#!/bin/bash

# t option {{{
Color_off='\033[0m'       # Text Reset

# terminal color template {{{
# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White

# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_Yellow='\033[43m'      # Yellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan
On_White='\033[47m'       # White

# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IYellow='\033[0;93m'      # Yellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White

# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IYellow='\033[0;103m'  # Yellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White
# }}}

# success/info/error/warn {{{        
function msg() {                               
   printf '%b\n' "$1" >&2          
}                                     

function success() {                          
   msg "${Green}[âœ”]${Color_off} ${1}${2}"    
}

# install_neovim {{{    
function install_neovim () {    
  if [[ -d "$HOME/.config/nvim" ]]; then    
    if [[ "$(readlink $HOME/.config/nvim)" =~ \.SpaceVim$ ]]; then    
      success "Installed SpaceVim for neovim"    
    else    
      mv "$HOME/.config/nvim" "$HOME/.config/nvim_back"    
      success "BackUp $HOME/.config/nvim to $HOME/.config/nvim_back"    
      ln -s "$HOME/.SpaceVim" "$HOME/.config/nvim"    
      success "Installed SpaceVim for neovim"    
    fi    
  else    
    mkdir -p "$HOME/.config"    
    ln -s "$HOME/.SpaceVim" "$HOME/.config/nvim"    
    success "Installed SpaceVim for neovim"    
  fi    
}    
# }}}    

# install_vim {{{
function install_vim () {
  if [[ -f "$HOME/.vimrc" ]]; then
    mv "$HOME/.vimrc" "$HOME/.vimrc_back"
    success "Backup $HOME/.vimrc to $HOME/.vimrc_back"
  fi

  if [[ -d "$HOME/.vim" ]]; then
    if [[ "$(readlink $HOME/.vim)" =~ \.SpaceVim$ ]]; then
      success "Installed SpaceVim for vim"
    else
      mv "$HOME/.vim" "$HOME/.vim_back"
      success "BackUp $HOME/.vim to $HOME/.vim_back"
      ln -s "$HOME/.SpaceVim" "$HOME/.vim"
      success "Installed SpaceVim for vim"
    fi
  else
    ln -s "$HOME/.SpaceVim" "$HOME/.vim"
    success "Installed SpaceVim for vim"
  fi
}
# }}}

# unstall_vim {{{
function uninstall_vim () {
  if [[ -d "$HOME/.vim" ]]; then
    if [[ "$(readlink $HOME/.vim)" =~ \.SpaceVim$ ]]; then
      rm "$HOME/.vim"
      success "Uninstall SpaceVim for vim"
      if [[ -d "$HOME/.vim_back" ]]; then
        mv "$HOME/.vim_back" "$HOME/.vim"
        success "Recover from $HOME/.vim_back"
      fi
    fi
  fi
  if [[ -f "$HOME/.vimrc_back" ]]; then
    mv "$HOME/.vimrc_back" "$HOME/.vimrc"
    success "Recover from $HOME/.vimrc_back"
  fi
}
# }}}


function uninstall_neovim () {
  if [[ -d "$HOME/.config/nvim" ]]; then
    if [[ "$(readlink $HOME/.config/nvim)" =~ \.SpaceVim$ ]]; then
      rm "$HOME/.config/nvim"
      success "Uninstall SpaceVim for neovim"
      if [[ -d "$HOME/.config/nvim_back" ]]; then
        mv "$HOME/.config/nvim_back" "$HOME/.config/nvim"
        success "Recover from $HOME/.config/nvim_back"
      fi
    fi
  fi
}
# }}}

function cls() {
  rm -rf $HOME/.vim*
}

function clean() {
  cls
  uninstall
}

function uninstall() {
  uninstall_neovim
  rm -rf $HOME/.SpaceVim*
  rm -rf $HOME/.cache/vimfiles $HOME/.cache/SpaceVim
  rm -rf $HOME/.vim
}

function update() {
  tar cvzf SpaceVim.tgz -C $HOME .SpaceVim .SpaceVim.d .cache/vimfiles .cache/SpaceVim --exclude .cache/SpaceVim/backup --exclude .cache/SpaceVim/undofile
}

function install() {
  cls
  tar -xvzf SpaceVim.tgz -C $HOME
  mkdir $HOME/.vim    
  ln -svf ~/.SpaceVim/* ~/.vim/

  # configure for neovim
  install_neovim
}

function package() {
  tar -cvzf marmotVim$1.tgz ../marmotVim/marmotVimCtl  ../marmotVim/README.md  ../marmotVim/SpaceVim.tgz
  echo packaged file is: marmotVim$1.tgz
}

function usage() {
  echo "usage: $0 {update|install|uninstall|clean|package}"
}

case "$1" in
  'update')
    update
    ;;  
  'install')
    install
    ;;  
  'uninstall')
    uninstall
    ;;  
  'clean')
    clean
    ;;  
  'package')
    version=$2
    if [ "$2" != "" ];then
      version="-$2"
    fi
    package $version
    ;;  
  '-h')
    usage
    ;;  
  *)  
    usage
    exit 1
    ;;  
esac
